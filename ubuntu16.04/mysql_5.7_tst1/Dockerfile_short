# ==========================================
# Ubuntu 16.04 MySQL 5.7 Dockerfile
# ==========================================

#
# Cleaned Dockerfile
# Optimized to only apt-date and clean only once
#

# Import previous building block image php5
#
FROM pvln/ubuntu16.04-lvl1-php_5.6:1.0

LABEL version="1.0" \
      maintainer="Pierre Veelen <pierre@pvln.nl>"

# ==========================================
# START OF INSTALLING MYSQL
# ==========================================

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
#
RUN groupadd -r mysql && \
    useradd -r -g mysql mysql
	
# Important to update the packages list before installing since they are removed after the install
RUN sudo apt-get update && \
    sudo apt-get upgrade -y && \
    sudo apt-get install -y \
      perl --no-install-recommends && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV MYSQL_VERSION 5.7

# the "/var/lib/mysql" stuff here is because the mysql-server postinst doesn't have an explicit way to disable the mysql_install_db codepath besides having a database already "configured" (ie, stuff in /var/lib/mysql/mysql)
# also, we set debconf keys to make APT a little quieter
RUN { \
		echo mysql-community-server mysql-community-server/data-dir select ''; \
		echo mysql-community-server mysql-community-server/root-pass password ''; \
		echo mysql-community-server mysql-community-server/re-root-pass password ''; \
		echo mysql-community-server mysql-community-server/remove-test-db select false; \
	} | debconf-set-selections \
	&& apt-get update && apt-get install -y mysql-server="${MYSQL_VERSION}" && rm -rf /var/lib/apt/lists/* \
	&& rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql /var/run/mysqld \
	&& chown -R mysql:mysql /var/lib/mysql /var/run/mysqld \
# ensure that /var/run/mysqld (used for socket and lock files) is writable regardless of the UID our mysqld instance ends up having at runtime
	&& chmod 777 /var/run/mysqld \
# comment out a few problematic configuration values
	&& find /etc/mysql/ -name '*.cnf' -print0 \
		| xargs -0 grep -lZE '^(bind-address|log)' \
		| xargs -rt -0 sed -Ei 's/^(bind-address|log)/#&/' \
# don't reverse lookup hostnames, they are usually another container
	&& echo '[mysqld]\nskip-host-cache\nskip-name-resolve' > /etc/mysql/conf.d/docker.cnf


# ==========================================
# END OF INSTALLING MYSQL
# ==========================================

# ==========================================
# START OF PORTS AND VOLUMES
# ==========================================

# Expose apache2 on port 80 of the container
#
EXPOSE 80

# Expose mysql on port 3306 of the container
#
EXPOSE 3306

# Mountable datafolder path(s) within the container
#
# A key point to be aware of here is that anything after the VOLUME instruction
# in a Dockerfile will not be able to make changes to that volume
#

# Volumes for apache2
#
VOLUME /var/www/html
VOLUME /var/log/apache2

# Volume for MySQL
#
VOLUME /var/lib/mysql

# ==========================================
# END OF PORTS AND VOLUMES
# ==========================================

# ==========================================
# ENTRYPOINT & CMD
# ==========================================

#
# Inspiration: http://goinbigdata.com/docker-run-vs-cmd-vs-entrypoint/
#
# Prefer ENTRYPOINT to CMD when building executable Docker image and you need a command always to be executed.
# Additionally use CMD if you need to provide extra default arguments that could be overwritten from command line when docker container runs.
# Choose CMD if you need to provide a default command and/or arguments that can be overwritten from command line when docker container runs.
#

# Cancel pre-defined start-up instruction and allow us to use our own.
#
ENTRYPOINT []

ADD ./entrypoint.sh /usr/local/bin/
#ENTRYPOINT ["/bin/bash","entrypoint.sh"]

#CMD ["mysqld"]

#start container in bash command mode
CMD ["/bin/bash"]
